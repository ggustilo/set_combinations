=begin

Objects: Menu, Items, Total

User Experience:
	
when user runs program:
	say hello and prompt for file path
	get file and set equal to file variable
	open file and begin parsing
	get first line and turn into target price
	turn subsequent lines into items with prices
	
	tell user that the program is now ready
	ask them if they wish to run it
	if they do
		calculate combos
	else
		say goodbye and exit

Get Combos - Bistro
	call calculation method on all items in menu
	pass total amount and menu items
	when the nested array is returned
		if it is empty, return a message like: no available combos match that amount
		else, present the combos nicely

		MODULE

Combo

class needed: combo - a combo will be an array of item objects
methods for combo: eql? (will sort two combos and compare contents), sums_to_total? (will sum contents of combo and see if it equals the total), eql_to_any? (will compare the combo to any in an array of larger combos)

Calculate

INPUT: a total amount as a float, an array of item objects
OUTPUT: a nested array of combinations of item objects that - when their prices are summed - equal the total

iterate through items
	get prices as floats
	remove any items whose prices are greater than the total

	divide total by each item price and see if there is a clean division with any of them

	find all permutations of the set at length - i (where i is 0 to length - 1)

	choose a random item from the set and add it to the sum
	if the sum is greater than the total,
		then just return
	if the sum is exactly the total
		then check if that combo has already been made
		if not, add it to an array of combos
		if so, discard it
	if the sum is less than the total
		call again

	if we don't already have this combination
		add it
		calculate sum
		if its above target, ditch it
		if its at target, return it to valid combos array
		if its below target
		add a new element
			try again
	else
		start a new combination
	end

if current_combo is not in the evaluated combos
	choose an item and add to current combo
		is the total reached?
		No:  choose another item and add to current combo (call again)
		Yes:  add the combo to evaluated combos
else
	return
end
	return valid


=end



















